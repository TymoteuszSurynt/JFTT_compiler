%{
extern "C" int yylex(); 
extern "C" int yyparse();
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include "ST.hpp"
#include "CG.hpp"
int err;
/*FUNCTIONS*/
int yylex(void);
void yyerror (char *msg);
/*MY FUNCTIONS*/
void newVariable(std::string name,int type);
%}
%union rec{
	int intval;
	char* pid;
	
}
%start program
/*TOKENS*/
%token VAR BEG END
%token FOR FROM TO DOWNTO DO WHILE IF THEN ELSE ENDFOR ENDWHILE ENDIF
%token READ WRITE
%token ASSIGN
%token bracketS bracketE
%token <pid> pidentifier
%token <pid,intval> pidentifierTable
%token <intval> num
/*TYPES*/
%type <intval> expression value
/*OPERATIONS*/
%left '+' '-'
%left '*' '/' '%'

%%
program		: VAR 
			vdeclarations 
		BEG 								{}
			commands 
		END								{}
		;

vdeclarations	: /* empty */							
		| vdeclarations pidentifier					{newVariable($2,1);}
		| vdeclarations pidentifier '[' num ']' 			{newVariable($2,$4);}
		;

commands	: /*empty*/
		| commands command						{}
		| command							{}
		;

command		: identifier ASSIGN expression					
		| IF condition THEN commands ELSE commands ENDIF
		| IF condition THEN commands ENDIF
		| WHILE condition DO commands ENDWHILE
		| FOR pidentifier FROM value TO value DO commands ENDFOR	{}
		| FOR pidentifier FROM value DOWNTO value DO commands ENDFOR	{}
		| READ identifier
		| WRITE value
		;

expression	: value
		| value '+' value						{$$ = $1 + $3;}
		| value '-' value						{$$ = $1 - $3;}
		| value '*' value						{$$ = $1 * $3;}
		| value '/' value						{
											if($3!=0){
												$$ = $1 / $3;
											}else{
												$$=0;
											}
										}
		| value '%' value						{
											if($3!=0){
												$$ = $1 % $3;
											}else{
												$$=0;
											}
										}
		;

condition	: value '=' value						{}
		| value "<>" value						{}
		| value '<' value						{}
		| value '>' value						{}
		| value "<=" value						{}
		| value ">=" value						{}
		;

value		: num								{printf("DEBUG NUM: %d\n",$1);}
		| identifier							{}
		;

identifier	: pidentifier							{}
		| pidentifier '[' pidentifier ']'				{}
		| pidentifier '['num']'						{}
		;
%%
int main(int argc, char* argv[]){
	err=0;
	yyparse();
	return 0;
}
/*yyerror*/
void yyerror (char *msg) { printf("Error: %s\n", msg); }
/*STABLE FUNCTIONS*/
void newVariable(std::string name,int type){
	if(!addVar(name)){
		stable[name].offset=dataLocation(type);
		err++;
		yyerror("Duplicate initialization\n");
	}
}

