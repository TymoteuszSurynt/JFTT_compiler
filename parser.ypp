%{
extern "C" int yylex(); 
extern "C" int yyparse();
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include "ST.hpp"
int err;
int yylex(void);
void yyerror (char *msg);

%}
%union semrec{
	int intval;
}
%start program
%token VAR BEG END
%token FOR FROM TO DOWNTO DO WHILE IF THEN ELSE ENDFOR ENDWHILE ENDIF
%token READ WRITE
%token ASSIGN
%token pidentifier
%token <intval> num
%type <intval> expression value
%left '+' '-'
%left '*' '/' '%'

%%
program		: VAR 
			vdeclarations 
		BEG 								{}
			commands 
		END								{}
		;

vdeclarations	: /* empty */							{}
		| vdeclarations pidentifier					{}
		| vdeclarations pidentifier [num]				{}
		;

commands	: commands command						{}
		| command							{}
		;

command		: identifier ASSIGN expression					
		| IF condition THEN commands ELSE commands ENDIF
		| IF condition THEN commands ENDIF
		| WHILE condition DO commands ENDWHILE
		| FOR pidentifier FROM value TO value DO commands ENDFOR	{}
		| FOR pidentifier FROM value DOWNTO value DO commands ENDFOR	{}
		| READ identifier
		| WRITE value
		;

expression	: value
		| value '+' value						{$$ = $1 + $3;}
		| value '-' value						{$$ = $1 - $3;}
		| value '*' value						{$$ = $1 * $3;}
		| value '/' value						{
											if($3!=0){
												$$ = $1 / $3;
											}else{
												$$=0;
											}
										}
		| value '%' value						{
											if($3!=0){
												$$ = $1 % $3;
											}else{
												$$=0;
											}
										}
		;

condition	: value '=' value						{}
		| value "<>" value						{}
		| value '<' value						{}
		| value '>' value						{}
		| value "<=" value						{}
		| value ">=" value						{}
		;

value		: num								{}
		| identifier							{}
		;

identifier	: pidentifier							{}
		| pidentifier '[' pidentifier ']'				{}
		| pidentifier '['num']'						{}
		;
%%
int main(int argc, char* argv[]){
	err=0;
	yyparse();
	return 0;
}
void yyerror (char *msg) { printf("ERROR %s\n", msg); }
