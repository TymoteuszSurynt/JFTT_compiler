%{
extern "C" int yylex(); 
extern "C" int yyparse();
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include "ST.hpp"
#include "CG.hpp"
#include "SM.hpp"
int err;
/*FUNCTIONS*/
int yylex(void);
void yyerror (char *msg);
/*MY FUNCTIONS*/
void newVariable(std::string name,int type);
struct labels* newLabel();
void addOperationLocal(enum codeOptions option, int arg);
struct varTab{
	int intval;
	bool table;
};	
struct varTabMath{
	int intval;
	bool variable;
	bool table;
};
struct labels{
	int goTo;
	int jumpFalse;
};
%}

%union rec{
	int intval;
	char * pid;
	struct varTab *tab;
	struct varTabMath *tab2;
	struct labels *label;
}
%start program
/*TOKENS*/
%token VAR BEG END
%token <label> IF WHILE FOR
%token FROM TO DOWNTO DO THEN ELSE ENDFOR ENDWHILE ENDIF
%token READ WRITE
%token SOE BOE DIFF
%token ASSIGN
%token bracketS bracketE
%token <pid> pidentifier
%token <tab> pidentifierTable
%token <intval> num
/*TYPES*/
%type <tab2> value
%type <tab> identifier
/*OPERATIONS*/
%left '+' '-'
%left '*' '/' '%'

%%
program		: VAR 								
			vdeclarations 						
		BEG 								
			commands 
		END								{addOperationLocal(HALT, -1);}
		;

vdeclarations	: /* empty */							
		| vdeclarations pidentifier					{newVariable($2,1);}
		| vdeclarations pidentifier '[' num ']' 			{newVariable($2,$4);}
		;

commands	: commands command						{}
		| command							{}
		;

command		: identifier ASSIGN expression ';'				{addOperationLocal(STORE, $1->intval);}	
		/*IF+ELSE*/
		| IF condition							{$1=newLabel();
										$1->jumpFalse=codeOffset;
										addOperationLocal(JZERO, -1);}
			commands						{$1->goTo=codeOffset;addOperationLocal(JUMP, -1);changeOperation($1->jumpFalse,codeOffset);}
		THEN 								
		ELSE commands							
		ENDIF								{changeOperation($1->goTo,codeOffset);}	
		/*IF*/
		| IF condition 							
		THEN 								{$1=newLabel();
										$1->jumpFalse=codeOffset;
										addOperationLocal(JZERO, -1);}
			commands							
		ENDIF								{changeOperation($1->jumpFalse,codeOffset);}	
		/*WHILE*/
		| WHILE	condition						{$1=newLabel();
										$1->jumpFalse=codeOffset;
										addOperationLocal(JZERO, -1);}
		DO commands 							{changeOperation($1->jumpFalse,codeOffset);}
		ENDWHILE
		/*FOR+TO*/
		| FOR pidentifier FROM value TO value DO commands ENDFOR	{}
		/*FOR+DOWNTO*/
		| FOR pidentifier FROM value DOWNTO value DO commands ENDFOR	{}
		/*READ+WRITE*/
		| READ identifier ';'						{addOperationLocal(GET, -1);
											if($2->table){
												addOperationLocal(STOREI, $2->intval);
											}else{
												addOperationLocal(STORE, $2->intval);
											}
										}
		| WRITE value ';'						{if($2->variable){
											if($2->table){
												addOperationLocal(LOADI, $2->intval);
											}else{
												addOperationLocal(LOAD, $2->intval);
											}
											
										}else{
											addOperationLocal(ZERO, -1);
											if($2->intval!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=$2->intval){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=$2->intval){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}
										addOperationLocal(PUT, -1);}
		;

expression	: value								{if($1->variable){
											if($1->table){
												addOperationLocal(LOADI, $1->intval);
											}else{
												addOperationLocal(LOAD, $1->intval);
											}
											
										}else{
											addOperationLocal(ZERO, -1);
											if($1->intval!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=$1->intval){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=$1->intval){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}}						
		| value '+' value						{if(!$1->variable && !$3->variable){
											int max=$1->intval+$3->intval;
											addOperationLocal(ZERO, -1);
											if(max!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=max){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=max){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}else if($1->variable){
												addOperationLocal(ZERO, -1);
												if($3->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$3->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$3->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}

												if($1->table){
													addOperationLocal(ADDI, $1->intval);
												}else{
													addOperationLocal(ADD, $1->intval);}
											}else{
												addOperationLocal(ZERO, -1);
												if($1->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$1->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$1->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}

												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}
										}
										}
		| value '-' value						{if(!$1->variable && !$3->variable){
											int max=$1->intval-$3->intval;
											addOperationLocal(ZERO, -1);
											if(max>0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=max){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=max){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}else if($1->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												for(int i=0;i<$3->intval;i++){
													addOperationLocal(DEC, -1);
												}
											}else{
												addOperationLocal(ZERO, -1);
												if($1->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$1->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$1->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}

												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}
										}}
		| value '*' value						{if(!$1->variable && !$3->variable){
											int max=$1->intval*$3->intval;
											addOperationLocal(ZERO, -1);
											if(max!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=max){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=max){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}else if($1->variable){
												addOperationLocal(ZERO, -1);
												if($3->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$3->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$3->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}

												if($1->table){
													addOperationLocal(ADDI, $1->intval);
												}else{
													addOperationLocal(ADD, $1->intval);}
											}else{
												addOperationLocal(ZERO, -1);
												if($1->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$1->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$1->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}

												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}
										}}
		| value '/' value						{if(!$1->variable && !$3->variable){
											int max;
											if($3->intval!=0)
												max=$1->intval/$3->intval;
											else
												max=0;
											addOperationLocal(ZERO, -1);
											if(max!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=max){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=max){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}else{

										}}
											
		| value '%' value						{if(!$1->variable && !$3->variable){
											int max;
											if($3->intval!=0)
												max=$1->intval%$3->intval;
											else
												max=0;
											addOperationLocal(ZERO, -1);
											if(max!=0)
												addOperationLocal(INC, -1);
											int numb=1;
											int numb1=2;
											while(numb1<=max){
												addOperationLocal(SHL, -1);
												numb=numb1;
												numb1=2*numb1;
											}
											numb1=numb+1;
											while(numb1<=max){
												addOperationLocal(INC, -1);
												numb=numb1;
												numb1=numb1+1;
											}
										}else{

										}}
		;

condition	: value '=' value						{if(!$1->variable && !$3->variable){
											if($1->intval==$3->intval){
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}else{
												addOperationLocal(ZERO, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(INC, -1);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}else if($1->variable){
												addOperationLocal(ZERO, -1);
												if($3->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$3->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$3->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}
												addOperationLocal(INC, -1);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
											}else{
												addOperationLocal(ZERO, -1);
												if($1->intval!=0)
													addOperationLocal(INC, -1);
												int numb=1;
												int numb1=2;
												while(numb1<=$1->intval){
													addOperationLocal(SHL, -1);
													numb=numb1;
													numb1=2*numb1;
												}
												numb1=numb+1;
												while(numb1<=$1->intval){
													addOperationLocal(INC, -1);
													numb=numb1;
													numb1=numb1+1;
												}
												addOperationLocal(INC, -1);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}
										}}
		| value DIFF value						{printf("Not Equals\n");}
		| value '<' value						{printf("Smaller\n");}
		| value '>' value						{printf("Bigger\n");}
		| value SOE value						{printf("Smaller Or Equal\n");}
		| value BOE value						{printf("Bigger Or Equal\n");}
		;

value		: num								{struct varTabMath *tempV= (struct varTabMath*)malloc(sizeof (struct varTabMath));
										tempV->intval=$1;
										tempV->variable=false;
										tempV->table=false;
										$$=tempV;}
		| identifier							{struct varTabMath *tempV= (struct varTabMath*)malloc(sizeof (struct varTabMath));
										tempV->intval=$1->intval;
										tempV->variable=true;
										if($1->table)
											tempV->table=true;
										else
											tempV->table=false;
										$$=tempV;}
		;

identifier	: pidentifier							{int k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k;
											tempV->table=false;
											$$=tempV;
										}else{
											err++;
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}	
		| pidentifier '[' pidentifier ']'				{int k=getVar($3);
										int l=getVar($1);
										if(k!=-1){
											if(l!=-1){
												struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
												tempV->intval=k;
												tempV->table=true;
												$$=tempV;
											}else{
												err++;
												std::string err1=$1;
												std::string error="Variable \""+err1+"\" not defined!\n";
												char * temp=new char[error.size()+1];
												strcpy ( temp, error.c_str() );
												yyerror(temp);
											}	
										}else{
											err++;
											std::string err1=$3;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		| pidentifier '['num']'						{int k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k+$3;
											tempV->table=false;
											$$=tempV;
										}else{
											err++;
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		;
%%
int main(int argc, char* argv[]){
	err=0;
	yyparse();
	if(err==0){
		for (int i=0;i<instructions.size(); ++i){
			std::string agrStr;	
			if(instructions.at(i).arg==-1){
				agrStr="";
			}else{
				agrStr=std::to_string(instructions.at(i).arg);
			}
			std::cout <<i<<' '<<decodeEnum(instructions.at(i).co)<<' '<<agrStr <<std::endl;
		}
	}else{
		std::cout<<"Compilation ended with "<<err<<" errors\n";
	}
	
	return 0;
}
/*yyerror*/
void yyerror (char *msg) { printf("Error: %s\n", msg); }
/*STABLE FUNCTIONS*/
void newVariable(std::string name,int type){
	if(!addVar(name)){
		err++;
		yyerror("Duplicate initialization\n");
	}else{
		stable[name].offset=dataLocation(type);
	}
}
/*OTHER FUNCTIONS*/
struct labels* newLabel(){
	return (struct labels*) malloc(sizeof(struct labels));
}
void addOperationLocal(enum codeOptions option, int arg){
	addOperation(option,arg);
	codeOffset++;
}

