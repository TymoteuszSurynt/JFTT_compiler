%{
extern "C" int yylex(); 
extern "C" int yyparse();
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include "ST.hpp"
#include "CG.hpp"
#include "SM.hpp"
int err;
/*FUNCTIONS*/
int yylex(void);
void yyerror (char *msg);
/*MY FUNCTIONS*/
void newVariable(std::string name,int type);
struct labels* newLabel();
struct varTabFor* newFor();
void getNumber(long long n);
void addOperationLocal(enum codeOptions option, int arg);
struct varTab{
	long long intval;
	bool table;
};	
struct varTabMath{
	long long intval;
	bool variable;
	bool table;
};
struct varTabFor{
	long long start;
	long long iterator;
	long long end;
	long long change;
};
struct labels{
	long long goTo;
	long long jumpFalse;
};
%}

%union rec{
	long long intval;
	char * pid;
	struct varTab *tab;
	struct varTabMath *tab2;
	struct varTabFor *tab3;
	struct labels *label;
}
%start program
/*TOKENS*/
%token VAR BEG END
%token <label> IF WHILE
%token <tab3>FOR
%token FROM TO DOWNTO DO THEN ELSE ENDFOR ENDWHILE ENDIF
%token READ WRITE
%token SOE BOE DIFF
%token ASSIGN
%token <pid> pidentifier
%token <intval> num
/*TYPES*/
%type <tab2> value
%type <tab> identifier
%type <intval> condition
/*OPERATIONS*/
%left '+' '-'
%left '*' '/' '%'

%%
program		: VAR 								
			vdeclarations 						
		BEG 								
			commands 
		END								{addOperationLocal(HALT, -1);}
		;

vdeclarations	: /* empty */							
		| vdeclarations pidentifier					{newVariable($2,1);}
		| vdeclarations pidentifier '[' num ']' 			{newVariable($2,$4);}
		;

commands	: commands command						
		| command							
		;

command		: identifier ASSIGN expression ';'				{if($1->table){
											addOperationLocal(STOREI, $1->intval);
										}else{
											addOperationLocal(STORE, $1->intval);
										}}	
		/*IF+ELSE*/
		| IF condition						
		THEN								
			commands						{$1=newLabel();$1->goTo=codeOffset;addOperationLocal(JUMP, -1);changeOperation($2,codeOffset);}
		 								
		ELSE 
			commands							
		ENDIF								{changeOperation($1->goTo,codeOffset);}	
		/*IF*/
		| IF condition 							
		THEN 								
			commands						{changeOperation($2,codeOffset);}	
		ENDIF									
		/*WHILE*/
		| WHILE								{$1=newLabel();
										$1->jumpFalse=codeOffset;
										}
			condition						
		DO 
			commands 						{changeOperation($3,codeOffset+1);addOperationLocal(JUMP, $1->jumpFalse);}
		ENDWHILE
		/*FOR+TO*/
		| FOR 								
			pidentifier						
		FROM	
			value							{newVariable($2,1);$1=newFor();$1->iterator=getVar($2);
										if($4->variable){
											if($4->table){
												addOperationLocal(LOADI, $4->intval);
											}else{
												addOperationLocal(LOAD, $4->intval);
											}
											
										}else{
											getNumber($4->intval);							
										}
										addOperationLocal(STORE, $1->iterator);}
		TO
			value							{
										if($7->variable){
											if($7->table){
												addOperationLocal(LOADI, $7->intval);
											}else{
												addOperationLocal(LOAD, $7->intval);
											}
											
										}else{
											getNumber($7->intval);											
										}
										addOperationLocal(STORE, dataOffset);$1->end=dataOffset;dataOffset++;}
		DO								{addOperationLocal(LOAD, $1->end);addOperationLocal(INC, -1);
										addOperationLocal(SUB, $1->iterator);$1->change=codeOffset;addOperationLocal(JZERO, -1);
										$1->start=codeOffset;}
			commands						{addOperationLocal(LOAD, $1->iterator);addOperationLocal(INC, -1);addOperationLocal(STORE, $1->iterator);
										addOperationLocal(SUB, $1->end);addOperationLocal(JZERO, $1->start);}
		ENDFOR								{changeOperation($1->change,codeOffset);removeVar($2);}
		/*FOR+DOWNTO*/
		| FOR 								
			pidentifier						
		FROM	
			value							{newVariable($2,1);$1=newFor();$1->iterator=getVar($2);
										if($4->variable){
											if($4->table){
												addOperationLocal(LOADI, $4->intval);
											}else{
												addOperationLocal(LOAD, $4->intval);
											}
											
										}else{
											getNumber($4->intval);
										}
										addOperationLocal(STORE, $1->iterator);}
		DOWNTO
			value							{
										if($7->variable){
											if($7->table){
												addOperationLocal(LOADI, $7->intval);
											}else{
												addOperationLocal(LOAD, $7->intval);
											}
											
										}else{
											getNumber($7->intval);
										}
										addOperationLocal(DEC, -1);
										addOperationLocal(STORE, dataOffset);$1->end=dataOffset;dataOffset++;}
		DO								{addOperationLocal(LOAD, $1->iterator);
										addOperationLocal(SUB, $1->end);$1->change=codeOffset;
										addOperationLocal(JZERO, -1);$1->start=codeOffset;}
			commands						{addOperationLocal(LOAD, $1->iterator);addOperationLocal(DEC, -1);
										addOperationLocal(STORE, $1->iterator);
										addOperationLocal(SUB, $1->end);addOperationLocal(JZERO, codeOffset+2);
										addOperationLocal(JUMP, $1->start);}
		ENDFOR								{removeVar($2);changeOperation($1->change,codeOffset);}
		/*READ+WRITE*/
		| READ identifier ';'						{addOperationLocal(GET, -1);
											if($2->table){
												addOperationLocal(STOREI, $2->intval);
											}else{
												addOperationLocal(STORE, $2->intval);
											}
										}
		| WRITE value ';'						{if($2->variable){
											if($2->table){
												addOperationLocal(LOADI, $2->intval);
											}else{
												addOperationLocal(LOAD, $2->intval);
											}
											
										}else{
											getNumber($2->intval);
										}
										addOperationLocal(PUT, -1);}
		;

expression	: value								{if($1->variable){
											if($1->table){
												addOperationLocal(LOADI, $1->intval);
											}else{
												addOperationLocal(LOAD, $1->intval);
											}
											
										}else{
											getNumber($1->intval);
										}}						
		| value '+' value						{if(!$1->variable && !$3->variable){
											long long max=$1->intval+$3->intval;
											getNumber(max);
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}else if($1->variable){
												getNumber($3->intval);

												if($1->table){
													addOperationLocal(ADDI, $1->intval);
												}else{
													addOperationLocal(ADD, $1->intval);}
											}else{
												getNumber($1->intval);

												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
											}
										}
										}
		| value '-' value						{if(!$1->variable && !$3->variable){
											long long max=$1->intval-$3->intval;
											getNumber(max);
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(STORE, dataOffset);
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(SUB, dataOffset);
											}else{
												getNumber($1->intval);

												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}
										}}
		| value '*' value						{if(!$1->variable && !$3->variable){
											long long max=$1->intval*$3->intval;
											getNumber(max);
										}else{
											if($1->variable && $3->variable){
												long long r1=dataOffset;
												long long r2=dataOffset+1;
												long long r3=dataOffset+2;
												long long r4=dataOffset+3;												long long r5=dataOffset+4;
												long long jump;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, r1);
												addOperationLocal(STORE, r5);
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(JZERO,codeOffset+39);
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(JZERO,codeOffset+37);
												addOperationLocal(STORE,r2);
												addOperationLocal(JODD, codeOffset+2);
												addOperationLocal(JUMP, codeOffset+23);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, r2);
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(STORE, r3);
												addOperationLocal(LOAD, r1);
												addOperationLocal(JZERO, codeOffset+8);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r4);
												addOperationLocal(LOAD, r3);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, r3);
												addOperationLocal(LOAD, r4);
												addOperationLocal(JUMP, codeOffset-7);
												addOperationLocal(LOAD, r5);
												addOperationLocal(ADD, r3);
												addOperationLocal(STORE, r5);
												addOperationLocal(LOAD, r1);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, r1);
												addOperationLocal(LOAD, r2);
												addOperationLocal(JZERO, codeOffset+10);
												addOperationLocal(JUMP, codeOffset-23);

												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, r2);
												addOperationLocal(LOAD, r1);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, r1);
												addOperationLocal(LOAD, r2);
												addOperationLocal(JZERO, codeOffset+2);
												addOperationLocal(JUMP, codeOffset-31);
												addOperationLocal(LOAD, r5);
											}else if($1->variable){
												if($3->intval!=0){
													std::vector<int> bits;
													addOperationLocal(ZERO, -1);
													long long b=$3->intval;
													while(b>0){
														if(b%2==1){
															bits.insert(bits.begin(),1);
														}else{
															bits.insert(bits.begin(),0);
														}
														b=b/2;
													}
													for(long long i=0;i<bits.size();i++){
														if(bits.at(i)==1){
															addOperationLocal(SHL, -1);
															if($1->table){
																addOperationLocal(ADDI, $1->intval);
															}else{
																addOperationLocal(ADD, $1->intval);}
														}else{
															addOperationLocal(SHL, -1);
														}
													}
												}else{
													addOperationLocal(ZERO, -1);}
											}else{
												if($1->intval!=0){
													std::vector<int> bits;
													addOperationLocal(ZERO, -1);
													long long b=$1->intval;
													while(b>0){
														if(b%2==1){
															bits.insert(bits.begin(),1);
														}else{
															bits.insert(bits.begin(),0);
														}
														b=b/2;
													}
													for(long long i=0;i<bits.size();i++){
														if(bits.at(i)==1){
															addOperationLocal(SHL, -1);
															if($3->table){
																addOperationLocal(ADDI, $3->intval);
															}else{
																addOperationLocal(ADD, $3->intval);}
														}else{
															addOperationLocal(SHL, -1);
														}
													}
												}else{
													addOperationLocal(ZERO, -1);}
											}
										}}
		| value '/' value						{if(!$1->variable && !$3->variable){
											long long max;
											if($3->intval!=0)
												max=$1->intval/$3->intval;
											else
												max=0;
											getNumber(max);
										}else{
											if($1->variable && $3->variable){
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(JZERO, codeOffset+39);
												addOperationLocal(STORE, aux);

												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, q);
											}else if($1->variable){
										
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												getNumber($3->intval);
												addOperationLocal(JZERO, codeOffset+39);
												addOperationLocal(STORE, aux);

												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, q);
											}else{
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2,change;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												change=codeOffset;
												addOperationLocal(JZERO, -1);
												addOperationLocal(STORE, aux);
												getNumber($1->intval);
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, q);
												changeOperation(change,codeOffset);
											}
										}}
											
		| value '%' value						{if(!$1->variable && !$3->variable){
											long long max;
											if($3->intval!=0)
												max=$1->intval/$3->intval;
											else
												max=0;
											getNumber(max);
										}else{
											if($1->variable && $3->variable){
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(JZERO, codeOffset+39);
												addOperationLocal(STORE, aux);

												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, r);
											}else if($1->variable){
										
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												getNumber($3->intval);
												addOperationLocal(JZERO, codeOffset+39);
												addOperationLocal(STORE, aux);

												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, r);
											}else{
												long long r=dataOffset;
												long long q=dataOffset+1;
												long long n=dataOffset+2;	
												long long aux=dataOffset+3;
												long long jump1,jump2,change;
												addOperationLocal(ZERO, -1);
												addOperationLocal(STORE, q);
												addOperationLocal(STORE, n);
												
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												change=codeOffset;
												addOperationLocal(JZERO, -1);
												addOperationLocal(STORE, aux);
												getNumber($1->intval);
												addOperationLocal(STORE, r);	
												//while(aux<=a)
												jump1=codeOffset;
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+9);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, n);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(LOAD, r);
												addOperationLocal(JUMP, jump1);
												
												addOperationLocal(LOAD, n);
												jump2=codeOffset;
												//while(n>0)
												addOperationLocal(JZERO, codeOffset+20);
												addOperationLocal(LOAD, aux);
												addOperationLocal(SHR, -1);
												addOperationLocal(STORE, aux);
												addOperationLocal(LOAD, q);
												addOperationLocal(SHL, -1);
												addOperationLocal(STORE, q);
												//if(aux<=r)
												addOperationLocal(LOAD, r);
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, aux);
												addOperationLocal(JZERO, codeOffset+6);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, r);
												addOperationLocal(LOAD, q);
												addOperationLocal(INC, -1);
												addOperationLocal(STORE, q);
												
												addOperationLocal(LOAD, n);
												addOperationLocal(DEC, -1);
												addOperationLocal(STORE, n);
												addOperationLocal(JUMP, jump2);
												addOperationLocal(LOAD, r);
												changeOperation(change,codeOffset);
											}
										}}
		;

condition	: value '=' value						{if(!$1->variable && !$3->variable){
											if($1->intval==$3->intval){
												addOperationLocal(ZERO, -1);
											}else{
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(STORE, dataOffset);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
												if($1->table){
													addOperationLocal(ADDI, $1->intval);
												}else{
													addOperationLocal(ADD, $1->intval);}
												addOperationLocal(SUB, dataOffset);
												
											}else{
												getNumber($1->intval);
												addOperationLocal(STORE, dataOffset);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
												addOperationLocal(SUB, dataOffset);
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		| value DIFF value						{if(!$1->variable && !$3->variable){
											if($1->intval==$3->intval){
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}else{
												addOperationLocal(ZERO, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
												addOperationLocal(JZERO, codeOffset+3);
												addOperationLocal(ZERO, -1);
												addOperationLocal(JUMP, codeOffset+2);
												addOperationLocal(INC, -1);
												
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(STORE, dataOffset);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
												if($1->table){
													addOperationLocal(ADDI, $1->intval);
												}else{
													addOperationLocal(ADD, $1->intval);}
												addOperationLocal(SUB, dataOffset);
												addOperationLocal(JZERO, codeOffset+3);
												addOperationLocal(ZERO, -1);
												addOperationLocal(JUMP, codeOffset+2);
												addOperationLocal(INC, -1);
												
											}else{
												getNumber($1->intval);
												addOperationLocal(STORE, dataOffset);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
												if($3->table){
													addOperationLocal(ADDI, $3->intval);
												}else{
													addOperationLocal(ADD, $3->intval);}
												addOperationLocal(SUB, dataOffset);
												addOperationLocal(JZERO, codeOffset+3);
												addOperationLocal(ZERO, -1);
												addOperationLocal(JUMP, codeOffset+2);
												addOperationLocal(INC, -1);
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		| value '<' value						{if(!$1->variable && !$3->variable){
											if($1->intval<$3->intval){
												addOperationLocal(ZERO, -1);
											}else{
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(INC, -1);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(STORE, dataOffset);
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, dataOffset);
												
											}else{
												getNumber($1->intval);
												addOperationLocal(INC, -1);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		| value '>' value						{if(!$1->variable && !$3->variable){
											if($1->intval>$3->intval){
												addOperationLocal(ZERO, -1);
											}else{
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(INC, -1);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(INC, -1);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
												
												
												
											}else{
												getNumber($1->intval);
												addOperationLocal(STORE, dataOffset);
												if($3->table){
													addOperationLocal(LOAD, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(INC, -1);
												addOperationLocal(SUB, dataOffset);
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		| value SOE value						{if(!$1->variable && !$3->variable){
											if($1->intval<=$3->intval){
												addOperationLocal(ZERO, -1);
											}else{
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												addOperationLocal(STORE, dataOffset);
												if($1->table){
													addOperationLocal(LOADI, $1->intval);
												}else{
													addOperationLocal(LOAD, $1->intval);}
												addOperationLocal(SUB, dataOffset);
												
											}else{
												getNumber($1->intval);
												if($3->table){
													addOperationLocal(SUBI, $3->intval);
												}else{
													addOperationLocal(SUB, $3->intval);}
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		| value BOE value						{if(!$1->variable && !$3->variable){
											if($1->intval>=$3->intval){
												addOperationLocal(ZERO, -1);
											}else{
												addOperationLocal(ZERO, -1);addOperationLocal(INC, -1);
											}
										}else{
											if($1->variable && $3->variable){
												if($3->table){
													addOperationLocal(LOADI, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
											}else if($1->variable){
												getNumber($3->intval);
												if($1->table){
													addOperationLocal(SUBI, $1->intval);
												}else{
													addOperationLocal(SUB, $1->intval);}
												
												
												
											}else{
												getNumber($1->intval);
												addOperationLocal(STORE, dataOffset);
												if($3->table){
													addOperationLocal(LOAD, $3->intval);
												}else{
													addOperationLocal(LOAD, $3->intval);}
												addOperationLocal(SUB, dataOffset);
											}
										}
										addOperationLocal(JZERO, codeOffset+2);$$=codeOffset;addOperationLocal(JUMP, -1);}
		;

value		: num								{struct varTabMath *tempV= (struct varTabMath*)malloc(sizeof (struct varTabMath));
										tempV->intval=$1;
										tempV->variable=false;
										tempV->table=false;
										$$=tempV;}
		| identifier							{struct varTabMath *tempV= (struct varTabMath*)malloc(sizeof (struct varTabMath));
										tempV->intval=$1->intval;
										tempV->variable=true;
										if($1->table)
											tempV->table=true;
										else
											tempV->table=false;
										$$=tempV;}
		;

identifier	: pidentifier							{long long k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k;
											tempV->table=false;
											$$=tempV;
										}else{
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}	
		| pidentifier '[' pidentifier ']'				{long long k=getVar($3);
										long long l=getVar($1);
										if(k!=-1){
											if(l!=-1){
												struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
												tempV->intval=k;
												tempV->table=true;
												$$=tempV;
											}else{
												std::string err1=$1;
												std::string error="Variable \""+err1+"\" not defined!\n";
												char * temp=new char[error.size()+1];
												strcpy ( temp, error.c_str() );
												yyerror(temp);
											}	
										}else{
											std::string err1=$3;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		| pidentifier '['num']'						{long long k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k+$3;
											tempV->table=false;
											$$=tempV;
										}else{
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		;
%%
int main(int argc, char* argv[]){
	err=0;
	yyparse();
	if(err==0){
		for (long long i=0;i<instructions.size(); ++i){
			std::string agrStr;	
			if(instructions.at(i).arg==-1){
				agrStr="";
			}else{
				agrStr=std::to_string(instructions.at(i).arg);
			}
			// <<i<<' '
			std::cout<<decodeEnum(instructions.at(i).co)<<' '<<agrStr <<std::endl;
		}
	}else{
		std::cout<<"Compilation ended with "<<err<<" errors\n";
	}
	
	return 0;
}
/*yyerror*/
void yyerror (char *msg) { err++;printf("Error: %s\n", msg); }
/*STABLE FUNCTIONS*/
void newVariable(std::string name,int type){
	if(!addVar(name)){
		yyerror("Duplicate initialization\n");
	}else{
		stable[name].offset=dataLocation(type);
	}
}
/*OTHER FUNCTIONS*/
struct labels* newLabel(){
	return (struct labels*) malloc(sizeof(struct labels));
}
struct varTabFor* newFor(){
	return (struct varTabFor*) malloc(sizeof(struct varTabFor));
}
void addOperationLocal(enum codeOptions option, int arg){
	addOperation(option,arg);
	codeOffset++;
}
void getNumber(long long n){
	addOperationLocal(ZERO, -1);
	std::vector<int> bits;
	while(n>0){
		if(n%2==1){
			bits.insert(bits.begin(),1);
		}else{
			bits.insert(bits.begin(),0);
		}
		n=n/2;
	}
	for(long long i=0;i<bits.size();i++){
		if(bits.at(i)==1){
			addOperationLocal(SHL, -1);
			addOperationLocal(INC, -1);
		}else{
			addOperationLocal(SHL, -1);
		}
	}
}

