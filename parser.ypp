%{
extern "C" int yylex(); 
extern "C" int yyparse();
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include "ST.hpp"
#include "CG.hpp"
#include "SM.hpp"
int err;
/*FUNCTIONS*/
int yylex(void);
void yyerror (char *msg);
/*MY FUNCTIONS*/
void newVariable(std::string name,int type);
struct varTab{
	int intval;
	bool table;
};	
%}

%union rec{
	int intval;
	char * pid;
	struct varTab *tab;
}
%start program
/*TOKENS*/
%token VAR BEG END
%token FOR FROM TO DOWNTO DO WHILE IF THEN ELSE ENDFOR ENDWHILE ENDIF
%token READ WRITE
%token ASSIGN
%token bracketS bracketE
%token <pid> pidentifier
%token <tab> pidentifierTable
%token <intval> num
/*TYPES*/
%type <tab> identifier
/*OPERATIONS*/
%left '+' '-'
%left '*' '/' '%'

%%
program		: VAR 
			vdeclarations 
		BEG 								{}
			commands 
		END								{addOperation(HALT, -1);codeOffset++;}
		;

vdeclarations	: /* empty */							
		| vdeclarations pidentifier					{newVariable($2,1);}
		| vdeclarations pidentifier '[' num ']' 			{newVariable($2,$4);}
		;

commands	: /*empty*/
		| commands command						{}
		| command							{}
		;

command		: identifier ASSIGN expression					{addOperation(STORE, $1->intval);codeOffset++;}	
		| IF condition THEN commands ELSE commands ENDIF
		| IF condition THEN commands ENDIF
		| WHILE condition DO commands ENDWHILE
		| FOR pidentifier FROM value TO value DO commands ENDFOR	{}
		| FOR pidentifier FROM value DOWNTO value DO commands ENDFOR	{}
		| READ identifier						{addOperation(GET, -1);codeOffset++;
											if($2->table){
												addOperation(STOREI, $2->intval);
											}else{
												addOperation(STORE, $2->intval);
											}
											codeOffset++;}
		| WRITE value							{addOperation(PUT, -1);codeOffset++;}
		;

expression	: value							
		| value '+' value						{}
		| value '-' value						{}
		| value '*' value						{}
		| value '/' value						{}
											
		| value '%' value						{}
		;

condition	: value '=' value						{}
		| value "<>" value						{}
		| value '<' value						{}
		| value '>' value						{}
		| value "<=" value						{}
		| value ">=" value						{}
		;

value		: num								{addOperation(ZERO, -1);codeOffset++;addOperation(INC, -1);codeOffset++;}
		| identifier							{if($1->table){
											addOperation(LOADI, $1->intval);
										}else{
											addOperation(LOAD, $1->intval);
										}
										codeOffset++;}
		;

identifier	: pidentifier							{int k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k;
											tempV->table=false;
											$$=tempV;
										}else{
											err++;
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}	
		| pidentifier '[' pidentifier ']'				{int k=getVar($3);
										int l=getVar($1);
										if(k!=-1){
											if(l!=-1){
												struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
												tempV->intval=k;
												tempV->table=true;
												$$=tempV;
											}else{
												err++;
												std::string err1=$1;
												std::string error="Variable \""+err1+"\" not defined!\n";
												char * temp=new char[error.size()+1];
												strcpy ( temp, error.c_str() );
												yyerror(temp);
											}	
										}else{
											err++;
											std::string err1=$3;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		| pidentifier '['num']'						{int k=getVar($1);
										if(k!=-1){
											struct varTab *tempV= (struct varTab*)malloc(sizeof (struct varTab));
											tempV->intval=k+$3;
											tempV->table=false;
											$$=tempV;
										}else{
											err++;
											std::string err1=$1;
											std::string error="Variable \""+err1+"\" not defined!\n";
											char * temp=new char[error.size()+1];
											strcpy ( temp, error.c_str() );
											yyerror(temp);
										}}
		;
%%
int main(int argc, char* argv[]){
	err=0;
	yyparse();
	if(err==0){
		for (int i=0;i<instructions.size(); ++i){
			std::string agrStr;	
			if(instructions.at(i).arg==-1){
				agrStr="";
			}else{
				agrStr=std::to_string(instructions.at(i).arg);
			}
			std::cout << decodeEnum(instructions.at(i).co)<<' '<<agrStr <<std::endl;
		}
	}else{
		std::cout<<"Compilation ended with "<<err<<" errors\n";
	}
	
	return 0;
}
/*yyerror*/
void yyerror (char *msg) { printf("Error: %s\n", msg); }
/*STABLE FUNCTIONS*/
void newVariable(std::string name,int type){
	if(!addVar(name)){
		err++;
		yyerror("Duplicate initialization\n");
	}else{
		stable[name].offset=dataLocation(type);
	}
}

